# This CI setup provides a largely homogeneous configuration across all
# major platforms (Windows, MacOS, and Linux). The aim of this test setup is
# to create a "native" platform experience, using as few cross-platform
# helper tools as possible.
#
# On Linux/Mac a virtualenv is used for testing. The effective virtual env
# is available under ~/VENV.
#
# All workers support remote login. Login details are shown at the top of each
# CI run log.
#
# - A permitted SSH key must be defined in an APPVEYOR_SSH_KEY environment
#   variable (via the appveyor project settings)
#
# - SSH login info is given in the form of: 'appveyor@67.225.164.xx -p 22xxx'
#
# - Login with:
#
#   ssh -o StrictHostKeyChecking=no <LOGIN>
#
# - to prevent the CI run from exiting, `touch` a file named `BLOCK` in the
#   user HOME directory (current directory directly after login). The session
#   will run until the file is removed (or 60 min have passed)


# make repository clone cheap
shallow_clone: false

environment:
  DATALAD_TESTS_SSH: 1

  # The ID variable had no impact, but sorts first in the CI run overview
  # an intelligible name can help to locate a specific test run
  matrix:
    - ID: Ubu20
      DTS: datalad_debian
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      INSTALL_SYSPKGS: python3-virtualenv devscripts moreutils reprepro
      # system git-annex is way too old, use better one
      INSTALL_GITANNEX: git-annex -m datalad/git-annex:release
      CODECOV_BINARY: https://uploader.codecov.io/latest/linux/codecov


# do not run the CI if only documentation changes were made
# documentation builds are tested elsewhere and cheaper
skip_commits:
  files:
    - docs/


# it is OK to specify paths that may not exist for a particular test run
cache:
  # pip cache
  - /home/appveyor/.cache/pip -> .appveyor.yml

# turn of support for MS project build support (not needed)
build: off


# init cannot use any components from the repo, because it runs prior to
# cloning it
init:
  # enable external SSH access to CI worker on all other systems
  # needs APPVEYOR_SSH_KEY defined in project settings (or environment)
  - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
  # Identity setup
  - git config --global user.email "test@appveyor.land"
  - git config --global user.name "Appveyor Almighty"
  - sh: mkdir ~/DLTMP
  - sh: export TMPDIR=~/DLTMP
  # Ubuntu 20.04 does not have singularity, get a recent one from upstream
  - sh: (cd ~/DLTMP && wget https://github.com/sylabs/singularity/releases/download/v3.10.0/singularity-ce_3.10.0-focal_amd64.deb && sudo dpkg -i singularity*deb)

install:
  # If a particular Python version is requested, use env setup (using the
  # appveyor provided environments/installation). Note, these are broken
  # on the ubuntu images
  # https://help.appveyor.com/discussions/problems/28217-appveyor-ubunu-image-with-python3-lzma-module
  # Otherwise create a virtualenv using the default Python 3, to enable uniform
  # use of python/pip executables below
  - sh: "[ \"x$PY\" != x ] && . ${HOME}/venv${PY}/bin/activate || virtualenv -p 3 ${HOME}/dlvenv && . ${HOME}/dlvenv/bin/activate; ln -s \"$VIRTUAL_ENV\" \"${HOME}/VENV\""
  - cmd: "set PATH=C:\\Python%PY%;C:\\Python%PY%\\Scripts;%PATH%"
  # deploy the datalad installer, override version via DATALAD_INSTALLER_VERSION
  - cmd:
      IF DEFINED DATALAD_INSTALLER_VERSION (
      python -m pip install "datalad-installer%DATALAD_INSTALLER_VERSION%"
      ) ELSE (
      python -m pip install datalad-installer
      )
  - sh: python -m pip install datalad-installer${DATALAD_INSTALLER_VERSION:-}
  # Missing system software
  - sh: "[ -n \"$INSTALL_SYSPKGS\" ] && ( [ \"x${APPVEYOR_BUILD_WORKER_IMAGE}\" = \"xmacOS\" ] && brew install -q ${INSTALL_SYSPKGS} || { sudo apt-get update -y && sudo apt-get install --no-install-recommends -y ${INSTALL_SYSPKGS}; } ) || true"
  # Install git-annex on windows, otherwise INSTALL_SYSPKGS can be used
  # deploy git-annex, if desired
  - cmd: IF DEFINED INSTALL_GITANNEX datalad-installer --sudo ok %INSTALL_GITANNEX%
  - sh: "[ -n \"${INSTALL_GITANNEX}\" ] && datalad-installer --sudo ok ${INSTALL_GITANNEX}"
  # in case of a snapshot installation, use the following approach to adjust
  # the PATH as necessary
  #- sh: "[ -n \"${INSTALL_GITANNEX}\" ] && datalad-installer -E ${HOME}/dlinstaller_env.sh --sudo ok ${INSTALL_GITANNEX}"
  # add location of datalad installer results to PATH
  #- sh: "[ -f ${HOME}/dlinstaller_env.sh ] && . ${HOME}/dlinstaller_env.sh || true"


#before_build:
#


build_script:
  - python -m pip install -r requirements-devel.txt
  - python -m pip install .
  - python -m pip uninstall dataclasses  # TODO: where do dataclasses come from on python3.8? Our packages should not require them!


#after_build:
#


before_test:
  # simple call to see if datalad and git-annex are installed properly
  - datalad wtf


test_script:
  # run tests on installed module, not source tree files
  - cmd: md __testhome__
  - sh: mkdir __testhome__
  - cd __testhome__
  # run test selecion (--traverse-namespace needed from Python 3.8 onwards)
  - cmd: python -m pytest -s -v -m "not (turtle)" --cov=datalad_debian --pyargs %DTS%
  - sh:  python -m pytest -s -v -m "not (turtle)" --cov=datalad_debian --pyargs ${DTS}


after_test:
  - python -m coverage xml
  - sh: "curl -Os $CODECOV_BINARY"
  - sh: chmod +x codecov
  - sh: ./codecov

#on_success:
#


#on_failure:
#


on_finish:
  # conditionally block the exit of a CI run for direct debugging
  - sh: while [ -f ~/BLOCK ]; do sleep 5; done
